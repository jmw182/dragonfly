# generated by 'clang2py'
# flags '-c -k cdefmstu -o Dragonfly_types.py /Users/jeffreyweiss/git/dragonfly/lang/python/../../include/Dragonfly_types.h'
# -*- coding: utf-8 -*-
#
# TARGET arch is: []
# WORD_SIZE is: 8
# POINTER_SIZE is: 8
# LONGDOUBLE_SIZE is: 16
#
import ctypes




_DRAGONFLY_TYPES_H_ = True # macro
MODULE_ID = ctypes.c_int16
HOST_ID = ctypes.c_int16
MSG_TYPE = ctypes.c_int32
MSG_COUNT = ctypes.c_int32
MAX_MODULES = 200 # macro
DYN_MOD_ID_START = 100 # macro
MAX_HOSTS = 5 # macro
MAX_MESSAGE_TYPES = 10000 # macro
MIN_STREAM_TYPE = 9000 # macro
MAX_TIMERS = 100 # macro
MAX_INTERNAL_TIMERS = 20 # macro
MAX_DRAGONFLY_MSG_TYPE = 99 # macro
MAX_DRAGONFLY_MODULE_ID = 9 # macro
class struct_c__SA_DF_MSG_HEADER(ctypes.Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('msg_type', ctypes.c_int32),
    ('msg_count', ctypes.c_int32),
    ('send_time', ctypes.c_double),
    ('recv_time', ctypes.c_double),
    ('src_host_id', ctypes.c_int16),
    ('src_mod_id', ctypes.c_int16),
    ('dest_host_id', ctypes.c_int16),
    ('dest_mod_id', ctypes.c_int16),
    ('num_data_bytes', ctypes.c_int32),
    ('remaining_bytes', ctypes.c_int32),
    ('is_dynamic', ctypes.c_int32),
    ('reserved', ctypes.c_int32),
     ]

DF_MSG_HEADER = struct_c__SA_DF_MSG_HEADER
MAX_CONTIGUOUS_MESSAGE_DATA = 9000 # macro
class struct_c__SA_DF_MESSAGE(ctypes.Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('msg_type', ctypes.c_int32),
    ('msg_count', ctypes.c_int32),
    ('send_time', ctypes.c_double),
    ('recv_time', ctypes.c_double),
    ('src_host_id', ctypes.c_int16),
    ('src_mod_id', ctypes.c_int16),
    ('dest_host_id', ctypes.c_int16),
    ('dest_mod_id', ctypes.c_int16),
    ('num_data_bytes', ctypes.c_int32),
    ('remaining_bytes', ctypes.c_int32),
    ('is_dynamic', ctypes.c_int32),
    ('reserved', ctypes.c_int32),
    ('data', ctypes.c_char * 9000),
     ]

DF_MESSAGE = struct_c__SA_DF_MESSAGE
MID_MESSAGE_MANAGER = 0 # macro
MID_COMMAND_MODULE = 1 # macro
MID_APPLICATION_MODULE = 2 # macro
MID_NETWORK_RELAY = 3 # macro
MID_STATUS_MODULE = 4 # macro
MID_QUICKLOGGER = 5 # macro
HID_LOCAL_HOST = 0 # macro
HID_ALL_HOSTS = 0x7FFF # macro
STRING_DATA = ctypes.c_char * 0
ALL_MESSAGE_TYPES = 0x7FFFFFFF # macro
MT_EXIT = 0 # macro
MT_KILL = 1 # macro
MT_ACKNOWLEDGE = 2 # macro
MT_FAIL_SUBSCRIBE = 6 # macro
class struct_c__SA_MDF_FAIL_SUBSCRIBE(ctypes.Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('mod_id', ctypes.c_int16),
    ('reserved', ctypes.c_int16),
    ('msg_type', ctypes.c_int32),
     ]

MDF_FAIL_SUBSCRIBE = struct_c__SA_MDF_FAIL_SUBSCRIBE
MT_FAILED_MESSAGE = 7 # macro
class struct_c__SA_MDF_FAILED_MESSAGE(ctypes.Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('dest_mod_id', ctypes.c_int16),
    ('reserved', ctypes.c_int16 * 3),
    ('time_of_failure', ctypes.c_double),
    ('msg_header', DF_MSG_HEADER),
     ]

MDF_FAILED_MESSAGE = struct_c__SA_MDF_FAILED_MESSAGE
MT_MM_ERROR = 83 # macro
MDF_MM_ERROR = ctypes.c_char * 0
MT_MM_INFO = 84 # macro
MDF_MM_INFO = ctypes.c_char * 0
MT_CONNECT = 13 # macro
class struct_c__SA_MDF_CONNECT(ctypes.Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('logger_status', ctypes.c_int16),
    ('daemon_status', ctypes.c_int16),
     ]

MDF_CONNECT = struct_c__SA_MDF_CONNECT
MT_DISCONNECT = 14 # macro
MT_SUBSCRIBE = 15 # macro
MT_UNSUBSCRIBE = 16 # macro
MT_PAUSE_SUBSCRIPTION = 85 # macro
MT_RESUME_SUBSCRIPTION = 86 # macro
MDF_SUBSCRIBE = ctypes.c_int32
MDF_UNSUBSCRIBE = ctypes.c_int32
MDF_PAUSE_SUBSCRIPTION = ctypes.c_int32
MDF_RESUME_SUBSCRIPTION = ctypes.c_int32
MT_SHUTDOWN_DRAGONFLY = 17 # macro
MT_SHUTDOWN_APP = 18 # macro
MT_FORCE_DISCONNECT = 82 # macro
class struct_c__SA_MDF_FORCE_DISCONNECT(ctypes.Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('mod_id', ctypes.c_int32),
     ]

MDF_FORCE_DISCONNECT = struct_c__SA_MDF_FORCE_DISCONNECT
MT_CORE_MODULE_REINIT_ACK = 25 # macro
MT_MODULE_READY = 26 # macro
class struct_c__SA_MDF_MODULE_READY(ctypes.Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('pid', ctypes.c_int32),
     ]

MDF_MODULE_READY = struct_c__SA_MDF_MODULE_READY
MT_DYNAMIC_DD_READ_ERR = 90 # macro
MDF_DYNAMIC_DD_READ_ERR = ctypes.c_char * 0
MT_DEBUG_TEXT = 91 # macro
MDF_DEBUG_TEXT = ctypes.c_char * 0
MT_AM_EXIT = 30 # macro
MT_START_APP = 31 # macro
MDF_START_APP = ctypes.c_char * 0
MT_STOP_APP = 32 # macro
MDF_STOP_APP = ctypes.c_char * 0
MT_RESTART_APP = 33 # macro
MDF_RESTART_APP = ctypes.c_char * 0
MT_KILL_APP = 34 # macro
MDF_KILL_APP = ctypes.c_char * 0
MT_AM_RE_READ_CONFIG_FILE = 89 # macro
MT_AM_GET_APP_NAME = 92 # macro
MT_SLAVE_START_APP = 64 # macro
MDF_SLAVE_START_APP = ctypes.c_char * 0
MT_SLAVE_START_APP_ACK = 65 # macro
class struct_c__SA_MDF_SLAVE_START_APP_ACK(ctypes.Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('num_remote_hosts', ctypes.c_int32),
     ]

MDF_SLAVE_START_APP_ACK = struct_c__SA_MDF_SLAVE_START_APP_ACK
MT_SLAVE_STOP_APP = 66 # macro
MDF_SLAVE_STOP_APP = ctypes.c_char * 0
MT_SLAVE_KILL_APP = 67 # macro
MDF_SLAVE_KILL_APP = ctypes.c_char * 0
MT_SLAVE_RESTART_APP = 68 # macro
MDF_SLAVE_RESTART_APP = ctypes.c_char * 0
MT_AM_ERROR = 35 # macro
MDF_AM_ERROR = ctypes.c_char * 0
MT_AM_ACKNOWLEDGE = 36 # macro
MT_FAIL_START_APP = 37 # macro
MDF_FAIL_START_APP = ctypes.c_char * 0
MT_FAIL_STOP_APP = 38 # macro
MDF_FAIL_STOP_APP = ctypes.c_char * 0
MT_FAIL_KILL_APP = 39 # macro
MDF_FAIL_KILL_APP = ctypes.c_char * 0
MT_APP_START_COMPLETE = 40 # macro
MT_APP_SHUTODWN_COMPLETE = 41 # macro
MT_APP_RESTART_COMPLETE = 42 # macro
MT_APP_KILL_COMPLETE = 43 # macro
MT_ALL_MODULES_READY = 44 # macro
MT_CORE_MODULE_REINIT = 45 # macro
MT_AM_CONFIG_FILE_DATA = 46 # macro
MDF_AM_CONFIG_FILE_DATA = ctypes.c_char * 0
MT_AM_APP_NAME = 93 # macro
MDF_AM_APP_NAME = ctypes.c_char * 0
MT_SLAVE_ALL_MODULES_READY = 69 # macro
MT_SLAVE_FAIL_START_APP = 70 # macro
MDF_SLAVE_FAIL_START_APP = ctypes.c_char * 0
MT_SLAVE_FAIL_STOP_APP = 71 # macro
MT_SLAVE_FAIL_KILL_APP = 72 # macro
MT_SLAVE_APP_SHUTODWN_COMPLETE = 74 # macro
MT_SLAVE_APP_RESTART_COMPLETE = 75 # macro
MT_SLAVE_APP_KILL_COMPLETE = 76 # macro
MT_SLAVE_AM_ERROR = 77 # macro
MDF_SLAVE_AM_ERROR = ctypes.c_char * 0
MT_APP_ERROR = 47 # macro
MDF_APP_ERROR = ctypes.c_char * 0
MT_SM_EXIT = 48 # macro
MT_CLOCK_SYNC = 49 # macro
MT_TIMER_EXPIRED = 50 # macro
class struct_c__SA_MDF_TIMER_EXPIRED(ctypes.Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('timer_id', ctypes.c_int32),
     ]

MDF_TIMER_EXPIRED = struct_c__SA_MDF_TIMER_EXPIRED
MT_TIMED_OUT = 73 # macro
MDF_TIMED_OUT = struct_c__SA_MDF_TIMER_EXPIRED
MT_SET_TIMER_FAILED = 51 # macro
class struct_c__SA_MDF_SET_TIMER_FAILED(ctypes.Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('mod_id', ctypes.c_int16),
    ('PADDING_0', ctypes.c_ubyte * 2),
    ('timer_id', ctypes.c_int32),
    ('snooze_time', ctypes.c_int32),
     ]

MDF_SET_TIMER_FAILED = struct_c__SA_MDF_SET_TIMER_FAILED
MT_TM_EXIT = 52 # macro
MT_SET_TIMER = 53 # macro
class struct_c__SA_MDF_SET_TIMER(ctypes.Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('timer_id', ctypes.c_int32),
    ('snooze_time', ctypes.c_int32),
     ]

MDF_SET_TIMER = struct_c__SA_MDF_SET_TIMER
MT_CANCEL_TIMER = 54 # macro
class struct_c__SA_MDF_CANCEL_TIMER(ctypes.Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('timer_id', ctypes.c_int32),
     ]

MDF_CANCEL_TIMER = struct_c__SA_MDF_CANCEL_TIMER
MT_LM_EXIT = 55 # macro
MT_MM_READY = 94 # macro
MT_LM_READY = 96 # macro
MT_SAVE_MESSAGE_LOG = 56 # macro
MAX_LOGGER_FILENAME_LENGTH = 256 # macro
class struct_c__SA_MDF_SAVE_MESSAGE_LOG(ctypes.Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('pathname', ctypes.c_char * 256),
    ('pathname_length', ctypes.c_int32),
     ]

MDF_SAVE_MESSAGE_LOG = struct_c__SA_MDF_SAVE_MESSAGE_LOG
MT_MESSAGE_LOG_SAVED = 57 # macro
MT_PAUSE_MESSAGE_LOGGING = 58 # macro
MT_RESUME_MESSAGE_LOGGING = 59 # macro
MT_RESET_MESSAGE_LOG = 60 # macro
MT_DUMP_MESSAGE_LOG = 61 # macro
MT_TIMING_TEST = 62 # macro
MAX_TIMING_TEST_TIME_POINTS = 12 # macro
class struct_c__SA_MDF_TIMING_TEST(ctypes.Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('time', ctypes.c_double * 12),
     ]

MDF_TIMING_TEST = struct_c__SA_MDF_TIMING_TEST
MT_TIMING_MESSAGE = 80 # macro
class struct_c__SA_MDF_TIMING_MESSAGE(ctypes.Structure):
    _pack_ = True # source:False
    _fields_ = [
    ('timing', ctypes.c_uint16 * 10000),
    ('ModulePID', ctypes.c_int32 * 200),
    ('send_time', ctypes.c_double),
     ]

MDF_TIMING_MESSAGE = struct_c__SA_MDF_TIMING_MESSAGE
__all__ = \
    ['ALL_MESSAGE_TYPES', 'DF_MESSAGE', 'DF_MSG_HEADER',
    'DYN_MOD_ID_START', 'HID_ALL_HOSTS', 'HID_LOCAL_HOST', 'HOST_ID',
    'MAX_CONTIGUOUS_MESSAGE_DATA', 'MAX_DRAGONFLY_MODULE_ID',
    'MAX_DRAGONFLY_MSG_TYPE', 'MAX_HOSTS', 'MAX_INTERNAL_TIMERS',
    'MAX_LOGGER_FILENAME_LENGTH', 'MAX_MESSAGE_TYPES', 'MAX_MODULES',
    'MAX_TIMERS', 'MAX_TIMING_TEST_TIME_POINTS', 'MDF_AM_APP_NAME',
    'MDF_AM_CONFIG_FILE_DATA', 'MDF_AM_ERROR', 'MDF_APP_ERROR',
    'MDF_CANCEL_TIMER', 'MDF_CONNECT', 'MDF_DEBUG_TEXT',
    'MDF_DYNAMIC_DD_READ_ERR', 'MDF_FAILED_MESSAGE',
    'MDF_FAIL_KILL_APP', 'MDF_FAIL_START_APP', 'MDF_FAIL_STOP_APP',
    'MDF_FAIL_SUBSCRIBE', 'MDF_FORCE_DISCONNECT', 'MDF_KILL_APP',
    'MDF_MM_ERROR', 'MDF_MM_INFO', 'MDF_MODULE_READY',
    'MDF_PAUSE_SUBSCRIPTION', 'MDF_RESTART_APP',
    'MDF_RESUME_SUBSCRIPTION', 'MDF_SAVE_MESSAGE_LOG',
    'MDF_SET_TIMER', 'MDF_SET_TIMER_FAILED', 'MDF_SLAVE_AM_ERROR',
    'MDF_SLAVE_FAIL_START_APP', 'MDF_SLAVE_KILL_APP',
    'MDF_SLAVE_RESTART_APP', 'MDF_SLAVE_START_APP',
    'MDF_SLAVE_START_APP_ACK', 'MDF_SLAVE_STOP_APP', 'MDF_START_APP',
    'MDF_STOP_APP', 'MDF_SUBSCRIBE', 'MDF_TIMED_OUT',
    'MDF_TIMER_EXPIRED', 'MDF_TIMING_MESSAGE', 'MDF_TIMING_TEST',
    'MDF_UNSUBSCRIBE', 'MID_APPLICATION_MODULE', 'MID_COMMAND_MODULE',
    'MID_MESSAGE_MANAGER', 'MID_NETWORK_RELAY', 'MID_QUICKLOGGER',
    'MID_STATUS_MODULE', 'MIN_STREAM_TYPE', 'MODULE_ID', 'MSG_COUNT',
    'MSG_TYPE', 'MT_ACKNOWLEDGE', 'MT_ALL_MODULES_READY',
    'MT_AM_ACKNOWLEDGE', 'MT_AM_APP_NAME', 'MT_AM_CONFIG_FILE_DATA',
    'MT_AM_ERROR', 'MT_AM_EXIT', 'MT_AM_GET_APP_NAME',
    'MT_AM_RE_READ_CONFIG_FILE', 'MT_APP_ERROR',
    'MT_APP_KILL_COMPLETE', 'MT_APP_RESTART_COMPLETE',
    'MT_APP_SHUTODWN_COMPLETE', 'MT_APP_START_COMPLETE',
    'MT_CANCEL_TIMER', 'MT_CLOCK_SYNC', 'MT_CONNECT',
    'MT_CORE_MODULE_REINIT', 'MT_CORE_MODULE_REINIT_ACK',
    'MT_DEBUG_TEXT', 'MT_DISCONNECT', 'MT_DUMP_MESSAGE_LOG',
    'MT_DYNAMIC_DD_READ_ERR', 'MT_EXIT', 'MT_FAILED_MESSAGE',
    'MT_FAIL_KILL_APP', 'MT_FAIL_START_APP', 'MT_FAIL_STOP_APP',
    'MT_FAIL_SUBSCRIBE', 'MT_FORCE_DISCONNECT', 'MT_KILL',
    'MT_KILL_APP', 'MT_LM_EXIT', 'MT_LM_READY',
    'MT_MESSAGE_LOG_SAVED', 'MT_MM_ERROR', 'MT_MM_INFO',
    'MT_MM_READY', 'MT_MODULE_READY', 'MT_PAUSE_MESSAGE_LOGGING',
    'MT_PAUSE_SUBSCRIPTION', 'MT_RESET_MESSAGE_LOG', 'MT_RESTART_APP',
    'MT_RESUME_MESSAGE_LOGGING', 'MT_RESUME_SUBSCRIPTION',
    'MT_SAVE_MESSAGE_LOG', 'MT_SET_TIMER', 'MT_SET_TIMER_FAILED',
    'MT_SHUTDOWN_APP', 'MT_SHUTDOWN_DRAGONFLY',
    'MT_SLAVE_ALL_MODULES_READY', 'MT_SLAVE_AM_ERROR',
    'MT_SLAVE_APP_KILL_COMPLETE', 'MT_SLAVE_APP_RESTART_COMPLETE',
    'MT_SLAVE_APP_SHUTODWN_COMPLETE', 'MT_SLAVE_FAIL_KILL_APP',
    'MT_SLAVE_FAIL_START_APP', 'MT_SLAVE_FAIL_STOP_APP',
    'MT_SLAVE_KILL_APP', 'MT_SLAVE_RESTART_APP', 'MT_SLAVE_START_APP',
    'MT_SLAVE_START_APP_ACK', 'MT_SLAVE_STOP_APP', 'MT_SM_EXIT',
    'MT_START_APP', 'MT_STOP_APP', 'MT_SUBSCRIBE', 'MT_TIMED_OUT',
    'MT_TIMER_EXPIRED', 'MT_TIMING_MESSAGE', 'MT_TIMING_TEST',
    'MT_TM_EXIT', 'MT_UNSUBSCRIBE', 'STRING_DATA',
    '_DRAGONFLY_TYPES_H_', 'struct_c__SA_DF_MESSAGE',
    'struct_c__SA_DF_MSG_HEADER', 'struct_c__SA_MDF_CANCEL_TIMER',
    'struct_c__SA_MDF_CONNECT', 'struct_c__SA_MDF_FAILED_MESSAGE',
    'struct_c__SA_MDF_FAIL_SUBSCRIBE',
    'struct_c__SA_MDF_FORCE_DISCONNECT',
    'struct_c__SA_MDF_MODULE_READY',
    'struct_c__SA_MDF_SAVE_MESSAGE_LOG', 'struct_c__SA_MDF_SET_TIMER',
    'struct_c__SA_MDF_SET_TIMER_FAILED',
    'struct_c__SA_MDF_SLAVE_START_APP_ACK',
    'struct_c__SA_MDF_TIMER_EXPIRED',
    'struct_c__SA_MDF_TIMING_MESSAGE', 'struct_c__SA_MDF_TIMING_TEST']
