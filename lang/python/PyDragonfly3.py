# This file was automatically generated by SWIG (http://www.swig.org).
# Version 3.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""Python3 interface to the University of Pittsburgh Motor Control Lab's Dragonfly messaging system."""


from sys import version_info as _swig_python_version_info
if _swig_python_version_info >= (2, 7, 0):
    def swig_import_helper():
        import importlib
        pkg = __name__.rpartition('.')[0]
        mname = '.'.join((pkg, '_PyDragonfly3')).lstrip('.')
        try:
            return importlib.import_module(mname)
        except ImportError:
            return importlib.import_module('_PyDragonfly3')
    _PyDragonfly3 = swig_import_helper()
    del swig_import_helper
elif _swig_python_version_info >= (2, 6, 0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_PyDragonfly3', [dirname(__file__)])
        except ImportError:
            import _PyDragonfly3
            return _PyDragonfly3
        try:
            _mod = imp.load_module('_PyDragonfly3', fp, pathname, description)
        finally:
            if fp is not None:
                fp.close()
        return _mod
    _PyDragonfly3 = swig_import_helper()
    del swig_import_helper
else:
    import _PyDragonfly3
del _swig_python_version_info

try:
    _swig_property = property
except NameError:
    pass  # Python < 2.2 doesn't have 'property'.

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_setattr_nondynamic(self, class_type, name, value, static=1):
    if (name == "thisown"):
        return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name, None)
    if method:
        return method(self, value)
    if (not static):
        if _newclass:
            object.__setattr__(self, name, value)
        else:
            self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)


def _swig_setattr(self, class_type, name, value):
    return _swig_setattr_nondynamic(self, class_type, name, value, 0)


def _swig_getattr(self, class_type, name):
    if (name == "thisown"):
        return self.this.own()
    method = class_type.__swig_getmethods__.get(name, None)
    if method:
        return method(self)
    raise AttributeError("'%s' object has no attribute '%s'" % (class_type.__name__, name))


def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except __builtin__.Exception:
    class _object:
        pass
    _newclass = 0


def void_ptr(n):
    """void_ptr(long long n) -> void *"""
    return _PyDragonfly3.void_ptr(n)

from ctypes import memmove, addressof, sizeof

def copy_from_msg(data, cmsg):
#memmove(addressof(data), cmsg.data, sizeof(data))
	cmsg.GetData(void_ptr(addressof(data)))

def copy_to_msg(data, cmsg):
	cmsg.SetData(void_ptr(addressof(data)), sizeof(data))

DEFAULT_PIPE_SERVER_NAME_FOR_MODULES = _PyDragonfly3.DEFAULT_PIPE_SERVER_NAME_FOR_MODULES
DEFAULT_PIPE_SERVER_NAME_FOR_MM = _PyDragonfly3.DEFAULT_PIPE_SERVER_NAME_FOR_MM
class CMessage(_object):
    """Proxy of C++ CMessage class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CMessage, name)
    __repr__ = _swig_repr
    __swig_setmethods__["data"] = _PyDragonfly3.CMessage_data_set
    __swig_getmethods__["data"] = _PyDragonfly3.CMessage_data_get
    if _newclass:
        data = _swig_property(_PyDragonfly3.CMessage_data_get, _PyDragonfly3.CMessage_data_set)
    __swig_setmethods__["large_data"] = _PyDragonfly3.CMessage_large_data_set
    __swig_getmethods__["large_data"] = _PyDragonfly3.CMessage_large_data_get
    if _newclass:
        large_data = _swig_property(_PyDragonfly3.CMessage_large_data_get, _PyDragonfly3.CMessage_large_data_set)

    def __init__(self, *args):
        """
        __init__(CMessage self) -> CMessage
        __init__(CMessage self, MSG_TYPE mt) -> CMessage
        __init__(CMessage self, MSG_TYPE mt, void * pData, int num_bytes) -> CMessage
        """
        this = _PyDragonfly3.new_CMessage(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyDragonfly3.delete_CMessage
    __del__ = lambda self: None

    def GetDataPointer(self):
        """GetDataPointer(CMessage self) -> void *"""
        return _PyDragonfly3.CMessage_GetDataPointer(self)


    def GetData(self, pData):
        """GetData(CMessage self, void * pData) -> int"""
        return _PyDragonfly3.CMessage_GetData(self, pData)


    def SetData(self, pData, num_bytes):
        """SetData(CMessage self, void * pData, int num_bytes) -> int"""
        return _PyDragonfly3.CMessage_SetData(self, pData, num_bytes)


    def AllocateData(self, num_bytes):
        """AllocateData(CMessage self, int num_bytes) -> int"""
        return _PyDragonfly3.CMessage_AllocateData(self, num_bytes)


    def Set(self, mt, pData=None, num_bytes=0):
        """
        Set(CMessage self, MSG_TYPE mt, void * pData=None, int num_bytes=0) -> int
        Set(CMessage self, MSG_TYPE mt, void * pData=None) -> int
        Set(CMessage self, MSG_TYPE mt) -> int
        """
        return _PyDragonfly3.CMessage_Set(self, mt, pData, num_bytes)


    def Receive(self, *args):
        """
        Receive(CMessage self, UPipe * input_pipe) -> int
        Receive(CMessage self, UPipe * input_pipe, double timeout) -> int
        """
        return _PyDragonfly3.CMessage_Receive(self, *args)


    def Send(self, *args):
        """
        Send(CMessage self, UPipe * output_pipe) -> int
        Send(CMessage self, UPipe * output_pipe, double timeout) -> int
        """
        return _PyDragonfly3.CMessage_Send(self, *args)


    def IsDynamic(self):
        """IsDynamic(CMessage self) -> bool"""
        return _PyDragonfly3.CMessage_IsDynamic(self)


    def GetHeader(self):
        """GetHeader(CMessage self) -> DF_MSG_HEADER"""
        return _PyDragonfly3.CMessage_GetHeader(self)

CMessage_swigregister = _PyDragonfly3.CMessage_swigregister
CMessage_swigregister(CMessage)

class Dragonfly_Module(_object):
    """Proxy of C++ Dragonfly_Module class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, Dragonfly_Module, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, Dragonfly_Module, name)
    __repr__ = _swig_repr

    def __init__(self, *args):
        """
        __init__(Dragonfly_Module self) -> Dragonfly_Module
        __init__(Dragonfly_Module self, MODULE_ID ModuleID, HOST_ID HostID) -> Dragonfly_Module
        __init__(Dragonfly_Module self, MODULE_ID ModuleID, HOST_ID HostID, int use_time_card) -> Dragonfly_Module
        """
        this = _PyDragonfly3.new_Dragonfly_Module(*args)
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyDragonfly3.delete_Dragonfly_Module
    __del__ = lambda self: None

    def Cleanup(self):
        """Cleanup(Dragonfly_Module self)"""
        return _PyDragonfly3.Dragonfly_Module_Cleanup(self)


    def InitVariables(self, ModuleID, HostID, use_time_card=0):
        """
        InitVariables(Dragonfly_Module self, MODULE_ID ModuleID, HOST_ID HostID, int use_time_card=0)
        InitVariables(Dragonfly_Module self, MODULE_ID ModuleID, HOST_ID HostID)
        """
        return _PyDragonfly3.Dragonfly_Module_InitVariables(self, ModuleID, HostID, use_time_card)


    def ConnectToMMM(self, *args):
        """
        ConnectToMMM(Dragonfly_Module self, int logger_status=0, int read_dd_file=0, int daemon_status=0) -> int
        ConnectToMMM(Dragonfly_Module self, int logger_status=0, int read_dd_file=0) -> int
        ConnectToMMM(Dragonfly_Module self, int logger_status=0) -> int
        ConnectToMMM(Dragonfly_Module self) -> int
        ConnectToMMM(Dragonfly_Module self, char * server_name, int logger_status=0, int read_dd_file=0, int daemon_status=0) -> int
        ConnectToMMM(Dragonfly_Module self, char * server_name, int logger_status=0, int read_dd_file=0) -> int
        ConnectToMMM(Dragonfly_Module self, char * server_name, int logger_status=0) -> int
        ConnectToMMM(Dragonfly_Module self, char * server_name) -> int
        """
        return _PyDragonfly3.Dragonfly_Module_ConnectToMMM(self, *args)


    def DisconnectFromMMM(self):
        """DisconnectFromMMM(Dragonfly_Module self) -> int"""
        return _PyDragonfly3.Dragonfly_Module_DisconnectFromMMM(self)


    def IsConnected(self):
        """IsConnected(Dragonfly_Module self) -> int"""
        return _PyDragonfly3.Dragonfly_Module_IsConnected(self)


    def SendModuleReady(self):
        """SendModuleReady(Dragonfly_Module self) -> int"""
        return _PyDragonfly3.Dragonfly_Module_SendModuleReady(self)


    def Subscribe(self, MessageType):
        """Subscribe(Dragonfly_Module self, MSG_TYPE MessageType) -> int"""
        return _PyDragonfly3.Dragonfly_Module_Subscribe(self, MessageType)


    def Unsubscribe(self, MessageType):
        """Unsubscribe(Dragonfly_Module self, MSG_TYPE MessageType) -> int"""
        return _PyDragonfly3.Dragonfly_Module_Unsubscribe(self, MessageType)


    def PauseSubscription(self, MessageType):
        """PauseSubscription(Dragonfly_Module self, MSG_TYPE MessageType) -> int"""
        return _PyDragonfly3.Dragonfly_Module_PauseSubscription(self, MessageType)


    def ResumeSubscription(self, MessageType):
        """ResumeSubscription(Dragonfly_Module self, MSG_TYPE MessageType) -> int"""
        return _PyDragonfly3.Dragonfly_Module_ResumeSubscription(self, MessageType)


    def SendMessage(self, M, dest_mod_id=0, dest_host_id=0):
        """
        SendMessage(Dragonfly_Module self, CMessage M, MODULE_ID dest_mod_id=0, HOST_ID dest_host_id=0) -> int
        SendMessage(Dragonfly_Module self, CMessage M, MODULE_ID dest_mod_id=0) -> int
        SendMessage(Dragonfly_Module self, CMessage M) -> int
        """
        return _PyDragonfly3.Dragonfly_Module_SendMessage(self, M, dest_mod_id, dest_host_id)


    def SendMessageDF(self, M, dest_mod_id=0, dest_host_id=0):
        """
        SendMessageDF(Dragonfly_Module self, CMessage M, MODULE_ID dest_mod_id=0, HOST_ID dest_host_id=0) -> int
        SendMessageDF(Dragonfly_Module self, CMessage M, MODULE_ID dest_mod_id=0) -> int
        SendMessageDF(Dragonfly_Module self, CMessage M) -> int
        """
        return _PyDragonfly3.Dragonfly_Module_SendMessageDF(self, M, dest_mod_id, dest_host_id)


    def SendSignal(self, MessageType, dest_mod_id=0, dest_host_id=0):
        """
        SendSignal(Dragonfly_Module self, MSG_TYPE MessageType, MODULE_ID dest_mod_id=0, HOST_ID dest_host_id=0) -> int
        SendSignal(Dragonfly_Module self, MSG_TYPE MessageType, MODULE_ID dest_mod_id=0) -> int
        SendSignal(Dragonfly_Module self, MSG_TYPE MessageType) -> int
        """
        return _PyDragonfly3.Dragonfly_Module_SendSignal(self, MessageType, dest_mod_id, dest_host_id)


    def SendSelfSignal(self, MessageType):
        """SendSelfSignal(Dragonfly_Module self, MSG_TYPE MessageType) -> int"""
        return _PyDragonfly3.Dragonfly_Module_SendSelfSignal(self, MessageType)


    def ReadMessage(self, M, timeout=-1):
        """
        ReadMessage(Dragonfly_Module self, CMessage M, double timeout=-1) -> int
        ReadMessage(Dragonfly_Module self, CMessage M) -> int
        """
        return _PyDragonfly3.Dragonfly_Module_ReadMessage(self, M, timeout)


    def WaitForSignal(self, SigType, blocking=1):
        """
        WaitForSignal(Dragonfly_Module self, MSG_TYPE SigType, int blocking=1) -> int
        WaitForSignal(Dragonfly_Module self, MSG_TYPE SigType) -> int
        """
        return _PyDragonfly3.Dragonfly_Module_WaitForSignal(self, SigType, blocking)


    def WaitForMessage(self, M, MsgType=-1):
        """
        WaitForMessage(Dragonfly_Module self, CMessage M, MSG_TYPE MsgType=-1)
        WaitForMessage(Dragonfly_Module self, CMessage M)
        """
        return _PyDragonfly3.Dragonfly_Module_WaitForMessage(self, M, MsgType)


    def SetTimer(self, time_ms):
        """SetTimer(Dragonfly_Module self, unsigned int time_ms) -> int"""
        return _PyDragonfly3.Dragonfly_Module_SetTimer(self, time_ms)


    def CancelTimer(self, timer_id):
        """CancelTimer(Dragonfly_Module self, int timer_id) -> int"""
        return _PyDragonfly3.Dragonfly_Module_CancelTimer(self, timer_id)


    def SelfNotifyExpiredTimer(self, timer_id):
        """SelfNotifyExpiredTimer(Dragonfly_Module self, int timer_id) -> int"""
        return _PyDragonfly3.Dragonfly_Module_SelfNotifyExpiredTimer(self, timer_id)


    def UpTime(self):
        """UpTime(Dragonfly_Module self) -> double"""
        return _PyDragonfly3.Dragonfly_Module_UpTime(self)


    def GetPid(self):
        """GetPid(Dragonfly_Module self) -> int"""
        return _PyDragonfly3.Dragonfly_Module_GetPid(self)


    def GetMessageCount(self):
        """GetMessageCount(Dragonfly_Module self) -> int"""
        return _PyDragonfly3.Dragonfly_Module_GetMessageCount(self)


    def GetHostID(self):
        """GetHostID(Dragonfly_Module self) -> HOST_ID"""
        return _PyDragonfly3.Dragonfly_Module_GetHostID(self)


    def GetModuleID(self):
        """GetModuleID(Dragonfly_Module self) -> MODULE_ID"""
        return _PyDragonfly3.Dragonfly_Module_GetModuleID(self)

Dragonfly_Module_swigregister = _PyDragonfly3.Dragonfly_Module_swigregister
Dragonfly_Module_swigregister(Dragonfly_Module)


def SetMyPriority(priority_class):
    """SetMyPriority(int priority_class) -> int"""
    return _PyDragonfly3.SetMyPriority(priority_class)

def GetMyPriority():
    """GetMyPriority() -> int"""
    return _PyDragonfly3.GetMyPriority()
MAX_MODULES = _PyDragonfly3.MAX_MODULES
DYN_MOD_ID_START = _PyDragonfly3.DYN_MOD_ID_START
MAX_HOSTS = _PyDragonfly3.MAX_HOSTS
MAX_MESSAGE_TYPES = _PyDragonfly3.MAX_MESSAGE_TYPES
MIN_STREAM_TYPE = _PyDragonfly3.MIN_STREAM_TYPE
MAX_TIMERS = _PyDragonfly3.MAX_TIMERS
MAX_INTERNAL_TIMERS = _PyDragonfly3.MAX_INTERNAL_TIMERS
MAX_DRAGONFLY_MSG_TYPE = _PyDragonfly3.MAX_DRAGONFLY_MSG_TYPE
MAX_DRAGONFLY_MODULE_ID = _PyDragonfly3.MAX_DRAGONFLY_MODULE_ID
class DF_MSG_HEADER(_object):
    """Proxy of C++ DF_MSG_HEADER class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DF_MSG_HEADER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DF_MSG_HEADER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_type"] = _PyDragonfly3.DF_MSG_HEADER_msg_type_set
    __swig_getmethods__["msg_type"] = _PyDragonfly3.DF_MSG_HEADER_msg_type_get
    if _newclass:
        msg_type = _swig_property(_PyDragonfly3.DF_MSG_HEADER_msg_type_get, _PyDragonfly3.DF_MSG_HEADER_msg_type_set)
    __swig_setmethods__["msg_count"] = _PyDragonfly3.DF_MSG_HEADER_msg_count_set
    __swig_getmethods__["msg_count"] = _PyDragonfly3.DF_MSG_HEADER_msg_count_get
    if _newclass:
        msg_count = _swig_property(_PyDragonfly3.DF_MSG_HEADER_msg_count_get, _PyDragonfly3.DF_MSG_HEADER_msg_count_set)
    __swig_setmethods__["send_time"] = _PyDragonfly3.DF_MSG_HEADER_send_time_set
    __swig_getmethods__["send_time"] = _PyDragonfly3.DF_MSG_HEADER_send_time_get
    if _newclass:
        send_time = _swig_property(_PyDragonfly3.DF_MSG_HEADER_send_time_get, _PyDragonfly3.DF_MSG_HEADER_send_time_set)
    __swig_setmethods__["recv_time"] = _PyDragonfly3.DF_MSG_HEADER_recv_time_set
    __swig_getmethods__["recv_time"] = _PyDragonfly3.DF_MSG_HEADER_recv_time_get
    if _newclass:
        recv_time = _swig_property(_PyDragonfly3.DF_MSG_HEADER_recv_time_get, _PyDragonfly3.DF_MSG_HEADER_recv_time_set)
    __swig_setmethods__["src_host_id"] = _PyDragonfly3.DF_MSG_HEADER_src_host_id_set
    __swig_getmethods__["src_host_id"] = _PyDragonfly3.DF_MSG_HEADER_src_host_id_get
    if _newclass:
        src_host_id = _swig_property(_PyDragonfly3.DF_MSG_HEADER_src_host_id_get, _PyDragonfly3.DF_MSG_HEADER_src_host_id_set)
    __swig_setmethods__["src_mod_id"] = _PyDragonfly3.DF_MSG_HEADER_src_mod_id_set
    __swig_getmethods__["src_mod_id"] = _PyDragonfly3.DF_MSG_HEADER_src_mod_id_get
    if _newclass:
        src_mod_id = _swig_property(_PyDragonfly3.DF_MSG_HEADER_src_mod_id_get, _PyDragonfly3.DF_MSG_HEADER_src_mod_id_set)
    __swig_setmethods__["dest_host_id"] = _PyDragonfly3.DF_MSG_HEADER_dest_host_id_set
    __swig_getmethods__["dest_host_id"] = _PyDragonfly3.DF_MSG_HEADER_dest_host_id_get
    if _newclass:
        dest_host_id = _swig_property(_PyDragonfly3.DF_MSG_HEADER_dest_host_id_get, _PyDragonfly3.DF_MSG_HEADER_dest_host_id_set)
    __swig_setmethods__["dest_mod_id"] = _PyDragonfly3.DF_MSG_HEADER_dest_mod_id_set
    __swig_getmethods__["dest_mod_id"] = _PyDragonfly3.DF_MSG_HEADER_dest_mod_id_get
    if _newclass:
        dest_mod_id = _swig_property(_PyDragonfly3.DF_MSG_HEADER_dest_mod_id_get, _PyDragonfly3.DF_MSG_HEADER_dest_mod_id_set)
    __swig_setmethods__["num_data_bytes"] = _PyDragonfly3.DF_MSG_HEADER_num_data_bytes_set
    __swig_getmethods__["num_data_bytes"] = _PyDragonfly3.DF_MSG_HEADER_num_data_bytes_get
    if _newclass:
        num_data_bytes = _swig_property(_PyDragonfly3.DF_MSG_HEADER_num_data_bytes_get, _PyDragonfly3.DF_MSG_HEADER_num_data_bytes_set)
    __swig_setmethods__["remaining_bytes"] = _PyDragonfly3.DF_MSG_HEADER_remaining_bytes_set
    __swig_getmethods__["remaining_bytes"] = _PyDragonfly3.DF_MSG_HEADER_remaining_bytes_get
    if _newclass:
        remaining_bytes = _swig_property(_PyDragonfly3.DF_MSG_HEADER_remaining_bytes_get, _PyDragonfly3.DF_MSG_HEADER_remaining_bytes_set)
    __swig_setmethods__["is_dynamic"] = _PyDragonfly3.DF_MSG_HEADER_is_dynamic_set
    __swig_getmethods__["is_dynamic"] = _PyDragonfly3.DF_MSG_HEADER_is_dynamic_get
    if _newclass:
        is_dynamic = _swig_property(_PyDragonfly3.DF_MSG_HEADER_is_dynamic_get, _PyDragonfly3.DF_MSG_HEADER_is_dynamic_set)
    __swig_setmethods__["reserved"] = _PyDragonfly3.DF_MSG_HEADER_reserved_set
    __swig_getmethods__["reserved"] = _PyDragonfly3.DF_MSG_HEADER_reserved_get
    if _newclass:
        reserved = _swig_property(_PyDragonfly3.DF_MSG_HEADER_reserved_get, _PyDragonfly3.DF_MSG_HEADER_reserved_set)
    __swig_setmethods__["utc_seconds"] = _PyDragonfly3.DF_MSG_HEADER_utc_seconds_set
    __swig_getmethods__["utc_seconds"] = _PyDragonfly3.DF_MSG_HEADER_utc_seconds_get
    if _newclass:
        utc_seconds = _swig_property(_PyDragonfly3.DF_MSG_HEADER_utc_seconds_get, _PyDragonfly3.DF_MSG_HEADER_utc_seconds_set)
    __swig_setmethods__["utc_fraction"] = _PyDragonfly3.DF_MSG_HEADER_utc_fraction_set
    __swig_getmethods__["utc_fraction"] = _PyDragonfly3.DF_MSG_HEADER_utc_fraction_get
    if _newclass:
        utc_fraction = _swig_property(_PyDragonfly3.DF_MSG_HEADER_utc_fraction_get, _PyDragonfly3.DF_MSG_HEADER_utc_fraction_set)

    def __init__(self):
        """__init__(DF_MSG_HEADER self) -> DF_MSG_HEADER"""
        this = _PyDragonfly3.new_DF_MSG_HEADER()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyDragonfly3.delete_DF_MSG_HEADER
    __del__ = lambda self: None
DF_MSG_HEADER_swigregister = _PyDragonfly3.DF_MSG_HEADER_swigregister
DF_MSG_HEADER_swigregister(DF_MSG_HEADER)

MAX_CONTIGUOUS_MESSAGE_DATA = _PyDragonfly3.MAX_CONTIGUOUS_MESSAGE_DATA
class DF_MESSAGE(_object):
    """Proxy of C++ DF_MESSAGE class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DF_MESSAGE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DF_MESSAGE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_type"] = _PyDragonfly3.DF_MESSAGE_msg_type_set
    __swig_getmethods__["msg_type"] = _PyDragonfly3.DF_MESSAGE_msg_type_get
    if _newclass:
        msg_type = _swig_property(_PyDragonfly3.DF_MESSAGE_msg_type_get, _PyDragonfly3.DF_MESSAGE_msg_type_set)
    __swig_setmethods__["msg_count"] = _PyDragonfly3.DF_MESSAGE_msg_count_set
    __swig_getmethods__["msg_count"] = _PyDragonfly3.DF_MESSAGE_msg_count_get
    if _newclass:
        msg_count = _swig_property(_PyDragonfly3.DF_MESSAGE_msg_count_get, _PyDragonfly3.DF_MESSAGE_msg_count_set)
    __swig_setmethods__["send_time"] = _PyDragonfly3.DF_MESSAGE_send_time_set
    __swig_getmethods__["send_time"] = _PyDragonfly3.DF_MESSAGE_send_time_get
    if _newclass:
        send_time = _swig_property(_PyDragonfly3.DF_MESSAGE_send_time_get, _PyDragonfly3.DF_MESSAGE_send_time_set)
    __swig_setmethods__["recv_time"] = _PyDragonfly3.DF_MESSAGE_recv_time_set
    __swig_getmethods__["recv_time"] = _PyDragonfly3.DF_MESSAGE_recv_time_get
    if _newclass:
        recv_time = _swig_property(_PyDragonfly3.DF_MESSAGE_recv_time_get, _PyDragonfly3.DF_MESSAGE_recv_time_set)
    __swig_setmethods__["src_host_id"] = _PyDragonfly3.DF_MESSAGE_src_host_id_set
    __swig_getmethods__["src_host_id"] = _PyDragonfly3.DF_MESSAGE_src_host_id_get
    if _newclass:
        src_host_id = _swig_property(_PyDragonfly3.DF_MESSAGE_src_host_id_get, _PyDragonfly3.DF_MESSAGE_src_host_id_set)
    __swig_setmethods__["src_mod_id"] = _PyDragonfly3.DF_MESSAGE_src_mod_id_set
    __swig_getmethods__["src_mod_id"] = _PyDragonfly3.DF_MESSAGE_src_mod_id_get
    if _newclass:
        src_mod_id = _swig_property(_PyDragonfly3.DF_MESSAGE_src_mod_id_get, _PyDragonfly3.DF_MESSAGE_src_mod_id_set)
    __swig_setmethods__["dest_host_id"] = _PyDragonfly3.DF_MESSAGE_dest_host_id_set
    __swig_getmethods__["dest_host_id"] = _PyDragonfly3.DF_MESSAGE_dest_host_id_get
    if _newclass:
        dest_host_id = _swig_property(_PyDragonfly3.DF_MESSAGE_dest_host_id_get, _PyDragonfly3.DF_MESSAGE_dest_host_id_set)
    __swig_setmethods__["dest_mod_id"] = _PyDragonfly3.DF_MESSAGE_dest_mod_id_set
    __swig_getmethods__["dest_mod_id"] = _PyDragonfly3.DF_MESSAGE_dest_mod_id_get
    if _newclass:
        dest_mod_id = _swig_property(_PyDragonfly3.DF_MESSAGE_dest_mod_id_get, _PyDragonfly3.DF_MESSAGE_dest_mod_id_set)
    __swig_setmethods__["num_data_bytes"] = _PyDragonfly3.DF_MESSAGE_num_data_bytes_set
    __swig_getmethods__["num_data_bytes"] = _PyDragonfly3.DF_MESSAGE_num_data_bytes_get
    if _newclass:
        num_data_bytes = _swig_property(_PyDragonfly3.DF_MESSAGE_num_data_bytes_get, _PyDragonfly3.DF_MESSAGE_num_data_bytes_set)
    __swig_setmethods__["remaining_bytes"] = _PyDragonfly3.DF_MESSAGE_remaining_bytes_set
    __swig_getmethods__["remaining_bytes"] = _PyDragonfly3.DF_MESSAGE_remaining_bytes_get
    if _newclass:
        remaining_bytes = _swig_property(_PyDragonfly3.DF_MESSAGE_remaining_bytes_get, _PyDragonfly3.DF_MESSAGE_remaining_bytes_set)
    __swig_setmethods__["is_dynamic"] = _PyDragonfly3.DF_MESSAGE_is_dynamic_set
    __swig_getmethods__["is_dynamic"] = _PyDragonfly3.DF_MESSAGE_is_dynamic_get
    if _newclass:
        is_dynamic = _swig_property(_PyDragonfly3.DF_MESSAGE_is_dynamic_get, _PyDragonfly3.DF_MESSAGE_is_dynamic_set)
    __swig_setmethods__["reserved"] = _PyDragonfly3.DF_MESSAGE_reserved_set
    __swig_getmethods__["reserved"] = _PyDragonfly3.DF_MESSAGE_reserved_get
    if _newclass:
        reserved = _swig_property(_PyDragonfly3.DF_MESSAGE_reserved_get, _PyDragonfly3.DF_MESSAGE_reserved_set)
    __swig_setmethods__["utc_seconds"] = _PyDragonfly3.DF_MESSAGE_utc_seconds_set
    __swig_getmethods__["utc_seconds"] = _PyDragonfly3.DF_MESSAGE_utc_seconds_get
    if _newclass:
        utc_seconds = _swig_property(_PyDragonfly3.DF_MESSAGE_utc_seconds_get, _PyDragonfly3.DF_MESSAGE_utc_seconds_set)
    __swig_setmethods__["utc_fraction"] = _PyDragonfly3.DF_MESSAGE_utc_fraction_set
    __swig_getmethods__["utc_fraction"] = _PyDragonfly3.DF_MESSAGE_utc_fraction_get
    if _newclass:
        utc_fraction = _swig_property(_PyDragonfly3.DF_MESSAGE_utc_fraction_get, _PyDragonfly3.DF_MESSAGE_utc_fraction_set)
    __swig_setmethods__["data"] = _PyDragonfly3.DF_MESSAGE_data_set
    __swig_getmethods__["data"] = _PyDragonfly3.DF_MESSAGE_data_get
    if _newclass:
        data = _swig_property(_PyDragonfly3.DF_MESSAGE_data_get, _PyDragonfly3.DF_MESSAGE_data_set)

    def __init__(self):
        """__init__(DF_MESSAGE self) -> DF_MESSAGE"""
        this = _PyDragonfly3.new_DF_MESSAGE()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyDragonfly3.delete_DF_MESSAGE
    __del__ = lambda self: None
DF_MESSAGE_swigregister = _PyDragonfly3.DF_MESSAGE_swigregister
DF_MESSAGE_swigregister(DF_MESSAGE)

MID_MESSAGE_MANAGER = _PyDragonfly3.MID_MESSAGE_MANAGER
MID_COMMAND_MODULE = _PyDragonfly3.MID_COMMAND_MODULE
MID_APPLICATION_MODULE = _PyDragonfly3.MID_APPLICATION_MODULE
MID_NETWORK_RELAY = _PyDragonfly3.MID_NETWORK_RELAY
MID_STATUS_MODULE = _PyDragonfly3.MID_STATUS_MODULE
MID_QUICKLOGGER = _PyDragonfly3.MID_QUICKLOGGER
HID_LOCAL_HOST = _PyDragonfly3.HID_LOCAL_HOST
HID_ALL_HOSTS = _PyDragonfly3.HID_ALL_HOSTS
ALL_MESSAGE_TYPES = _PyDragonfly3.ALL_MESSAGE_TYPES
MT_EXIT = _PyDragonfly3.MT_EXIT
MT_KILL = _PyDragonfly3.MT_KILL
MT_ACKNOWLEDGE = _PyDragonfly3.MT_ACKNOWLEDGE
MT_FAIL_SUBSCRIBE = _PyDragonfly3.MT_FAIL_SUBSCRIBE
class MDF_FAIL_SUBSCRIBE(_object):
    """Proxy of C++ MDF_FAIL_SUBSCRIBE class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_FAIL_SUBSCRIBE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_FAIL_SUBSCRIBE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mod_id"] = _PyDragonfly3.MDF_FAIL_SUBSCRIBE_mod_id_set
    __swig_getmethods__["mod_id"] = _PyDragonfly3.MDF_FAIL_SUBSCRIBE_mod_id_get
    if _newclass:
        mod_id = _swig_property(_PyDragonfly3.MDF_FAIL_SUBSCRIBE_mod_id_get, _PyDragonfly3.MDF_FAIL_SUBSCRIBE_mod_id_set)
    __swig_setmethods__["reserved"] = _PyDragonfly3.MDF_FAIL_SUBSCRIBE_reserved_set
    __swig_getmethods__["reserved"] = _PyDragonfly3.MDF_FAIL_SUBSCRIBE_reserved_get
    if _newclass:
        reserved = _swig_property(_PyDragonfly3.MDF_FAIL_SUBSCRIBE_reserved_get, _PyDragonfly3.MDF_FAIL_SUBSCRIBE_reserved_set)
    __swig_setmethods__["msg_type"] = _PyDragonfly3.MDF_FAIL_SUBSCRIBE_msg_type_set
    __swig_getmethods__["msg_type"] = _PyDragonfly3.MDF_FAIL_SUBSCRIBE_msg_type_get
    if _newclass:
        msg_type = _swig_property(_PyDragonfly3.MDF_FAIL_SUBSCRIBE_msg_type_get, _PyDragonfly3.MDF_FAIL_SUBSCRIBE_msg_type_set)

    def __init__(self):
        """__init__(MDF_FAIL_SUBSCRIBE self) -> MDF_FAIL_SUBSCRIBE"""
        this = _PyDragonfly3.new_MDF_FAIL_SUBSCRIBE()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyDragonfly3.delete_MDF_FAIL_SUBSCRIBE
    __del__ = lambda self: None
MDF_FAIL_SUBSCRIBE_swigregister = _PyDragonfly3.MDF_FAIL_SUBSCRIBE_swigregister
MDF_FAIL_SUBSCRIBE_swigregister(MDF_FAIL_SUBSCRIBE)

MT_FAILED_MESSAGE = _PyDragonfly3.MT_FAILED_MESSAGE
class MDF_FAILED_MESSAGE(_object):
    """Proxy of C++ MDF_FAILED_MESSAGE class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_FAILED_MESSAGE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_FAILED_MESSAGE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["dest_mod_id"] = _PyDragonfly3.MDF_FAILED_MESSAGE_dest_mod_id_set
    __swig_getmethods__["dest_mod_id"] = _PyDragonfly3.MDF_FAILED_MESSAGE_dest_mod_id_get
    if _newclass:
        dest_mod_id = _swig_property(_PyDragonfly3.MDF_FAILED_MESSAGE_dest_mod_id_get, _PyDragonfly3.MDF_FAILED_MESSAGE_dest_mod_id_set)
    __swig_setmethods__["reserved"] = _PyDragonfly3.MDF_FAILED_MESSAGE_reserved_set
    __swig_getmethods__["reserved"] = _PyDragonfly3.MDF_FAILED_MESSAGE_reserved_get
    if _newclass:
        reserved = _swig_property(_PyDragonfly3.MDF_FAILED_MESSAGE_reserved_get, _PyDragonfly3.MDF_FAILED_MESSAGE_reserved_set)
    __swig_setmethods__["time_of_failure"] = _PyDragonfly3.MDF_FAILED_MESSAGE_time_of_failure_set
    __swig_getmethods__["time_of_failure"] = _PyDragonfly3.MDF_FAILED_MESSAGE_time_of_failure_get
    if _newclass:
        time_of_failure = _swig_property(_PyDragonfly3.MDF_FAILED_MESSAGE_time_of_failure_get, _PyDragonfly3.MDF_FAILED_MESSAGE_time_of_failure_set)
    __swig_setmethods__["msg_header"] = _PyDragonfly3.MDF_FAILED_MESSAGE_msg_header_set
    __swig_getmethods__["msg_header"] = _PyDragonfly3.MDF_FAILED_MESSAGE_msg_header_get
    if _newclass:
        msg_header = _swig_property(_PyDragonfly3.MDF_FAILED_MESSAGE_msg_header_get, _PyDragonfly3.MDF_FAILED_MESSAGE_msg_header_set)

    def __init__(self):
        """__init__(MDF_FAILED_MESSAGE self) -> MDF_FAILED_MESSAGE"""
        this = _PyDragonfly3.new_MDF_FAILED_MESSAGE()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyDragonfly3.delete_MDF_FAILED_MESSAGE
    __del__ = lambda self: None
MDF_FAILED_MESSAGE_swigregister = _PyDragonfly3.MDF_FAILED_MESSAGE_swigregister
MDF_FAILED_MESSAGE_swigregister(MDF_FAILED_MESSAGE)

MT_MM_ERROR = _PyDragonfly3.MT_MM_ERROR
MT_MM_INFO = _PyDragonfly3.MT_MM_INFO
MT_CONNECT = _PyDragonfly3.MT_CONNECT
class MDF_CONNECT(_object):
    """Proxy of C++ MDF_CONNECT class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_CONNECT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_CONNECT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["logger_status"] = _PyDragonfly3.MDF_CONNECT_logger_status_set
    __swig_getmethods__["logger_status"] = _PyDragonfly3.MDF_CONNECT_logger_status_get
    if _newclass:
        logger_status = _swig_property(_PyDragonfly3.MDF_CONNECT_logger_status_get, _PyDragonfly3.MDF_CONNECT_logger_status_set)
    __swig_setmethods__["daemon_status"] = _PyDragonfly3.MDF_CONNECT_daemon_status_set
    __swig_getmethods__["daemon_status"] = _PyDragonfly3.MDF_CONNECT_daemon_status_get
    if _newclass:
        daemon_status = _swig_property(_PyDragonfly3.MDF_CONNECT_daemon_status_get, _PyDragonfly3.MDF_CONNECT_daemon_status_set)

    def __init__(self):
        """__init__(MDF_CONNECT self) -> MDF_CONNECT"""
        this = _PyDragonfly3.new_MDF_CONNECT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyDragonfly3.delete_MDF_CONNECT
    __del__ = lambda self: None
MDF_CONNECT_swigregister = _PyDragonfly3.MDF_CONNECT_swigregister
MDF_CONNECT_swigregister(MDF_CONNECT)

MT_DISCONNECT = _PyDragonfly3.MT_DISCONNECT
MT_SUBSCRIBE = _PyDragonfly3.MT_SUBSCRIBE
MT_UNSUBSCRIBE = _PyDragonfly3.MT_UNSUBSCRIBE
MT_PAUSE_SUBSCRIPTION = _PyDragonfly3.MT_PAUSE_SUBSCRIPTION
MT_RESUME_SUBSCRIPTION = _PyDragonfly3.MT_RESUME_SUBSCRIPTION
MT_SHUTDOWN_DRAGONFLY = _PyDragonfly3.MT_SHUTDOWN_DRAGONFLY
MT_SHUTDOWN_APP = _PyDragonfly3.MT_SHUTDOWN_APP
MT_FORCE_DISCONNECT = _PyDragonfly3.MT_FORCE_DISCONNECT
class MDF_FORCE_DISCONNECT(_object):
    """Proxy of C++ MDF_FORCE_DISCONNECT class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_FORCE_DISCONNECT, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_FORCE_DISCONNECT, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mod_id"] = _PyDragonfly3.MDF_FORCE_DISCONNECT_mod_id_set
    __swig_getmethods__["mod_id"] = _PyDragonfly3.MDF_FORCE_DISCONNECT_mod_id_get
    if _newclass:
        mod_id = _swig_property(_PyDragonfly3.MDF_FORCE_DISCONNECT_mod_id_get, _PyDragonfly3.MDF_FORCE_DISCONNECT_mod_id_set)

    def __init__(self):
        """__init__(MDF_FORCE_DISCONNECT self) -> MDF_FORCE_DISCONNECT"""
        this = _PyDragonfly3.new_MDF_FORCE_DISCONNECT()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyDragonfly3.delete_MDF_FORCE_DISCONNECT
    __del__ = lambda self: None
MDF_FORCE_DISCONNECT_swigregister = _PyDragonfly3.MDF_FORCE_DISCONNECT_swigregister
MDF_FORCE_DISCONNECT_swigregister(MDF_FORCE_DISCONNECT)

MT_CORE_MODULE_REINIT_ACK = _PyDragonfly3.MT_CORE_MODULE_REINIT_ACK
MT_MODULE_READY = _PyDragonfly3.MT_MODULE_READY
class MDF_MODULE_READY(_object):
    """Proxy of C++ MDF_MODULE_READY class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_MODULE_READY, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_MODULE_READY, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pid"] = _PyDragonfly3.MDF_MODULE_READY_pid_set
    __swig_getmethods__["pid"] = _PyDragonfly3.MDF_MODULE_READY_pid_get
    if _newclass:
        pid = _swig_property(_PyDragonfly3.MDF_MODULE_READY_pid_get, _PyDragonfly3.MDF_MODULE_READY_pid_set)

    def __init__(self):
        """__init__(MDF_MODULE_READY self) -> MDF_MODULE_READY"""
        this = _PyDragonfly3.new_MDF_MODULE_READY()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyDragonfly3.delete_MDF_MODULE_READY
    __del__ = lambda self: None
MDF_MODULE_READY_swigregister = _PyDragonfly3.MDF_MODULE_READY_swigregister
MDF_MODULE_READY_swigregister(MDF_MODULE_READY)

MT_DYNAMIC_DD_READ_ERR = _PyDragonfly3.MT_DYNAMIC_DD_READ_ERR
MT_DEBUG_TEXT = _PyDragonfly3.MT_DEBUG_TEXT
MT_AM_EXIT = _PyDragonfly3.MT_AM_EXIT
MT_START_APP = _PyDragonfly3.MT_START_APP
MT_STOP_APP = _PyDragonfly3.MT_STOP_APP
MT_RESTART_APP = _PyDragonfly3.MT_RESTART_APP
MT_KILL_APP = _PyDragonfly3.MT_KILL_APP
MT_AM_RE_READ_CONFIG_FILE = _PyDragonfly3.MT_AM_RE_READ_CONFIG_FILE
MT_AM_GET_APP_NAME = _PyDragonfly3.MT_AM_GET_APP_NAME
MT_SLAVE_START_APP = _PyDragonfly3.MT_SLAVE_START_APP
MT_SLAVE_START_APP_ACK = _PyDragonfly3.MT_SLAVE_START_APP_ACK
class MDF_SLAVE_START_APP_ACK(_object):
    """Proxy of C++ MDF_SLAVE_START_APP_ACK class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_SLAVE_START_APP_ACK, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_SLAVE_START_APP_ACK, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num_remote_hosts"] = _PyDragonfly3.MDF_SLAVE_START_APP_ACK_num_remote_hosts_set
    __swig_getmethods__["num_remote_hosts"] = _PyDragonfly3.MDF_SLAVE_START_APP_ACK_num_remote_hosts_get
    if _newclass:
        num_remote_hosts = _swig_property(_PyDragonfly3.MDF_SLAVE_START_APP_ACK_num_remote_hosts_get, _PyDragonfly3.MDF_SLAVE_START_APP_ACK_num_remote_hosts_set)

    def __init__(self):
        """__init__(MDF_SLAVE_START_APP_ACK self) -> MDF_SLAVE_START_APP_ACK"""
        this = _PyDragonfly3.new_MDF_SLAVE_START_APP_ACK()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyDragonfly3.delete_MDF_SLAVE_START_APP_ACK
    __del__ = lambda self: None
MDF_SLAVE_START_APP_ACK_swigregister = _PyDragonfly3.MDF_SLAVE_START_APP_ACK_swigregister
MDF_SLAVE_START_APP_ACK_swigregister(MDF_SLAVE_START_APP_ACK)

MT_SLAVE_STOP_APP = _PyDragonfly3.MT_SLAVE_STOP_APP
MT_SLAVE_KILL_APP = _PyDragonfly3.MT_SLAVE_KILL_APP
MT_SLAVE_RESTART_APP = _PyDragonfly3.MT_SLAVE_RESTART_APP
MT_AM_ERROR = _PyDragonfly3.MT_AM_ERROR
MT_AM_ACKNOWLEDGE = _PyDragonfly3.MT_AM_ACKNOWLEDGE
MT_FAIL_START_APP = _PyDragonfly3.MT_FAIL_START_APP
MT_FAIL_STOP_APP = _PyDragonfly3.MT_FAIL_STOP_APP
MT_FAIL_KILL_APP = _PyDragonfly3.MT_FAIL_KILL_APP
MT_APP_START_COMPLETE = _PyDragonfly3.MT_APP_START_COMPLETE
MT_APP_SHUTODWN_COMPLETE = _PyDragonfly3.MT_APP_SHUTODWN_COMPLETE
MT_APP_RESTART_COMPLETE = _PyDragonfly3.MT_APP_RESTART_COMPLETE
MT_APP_KILL_COMPLETE = _PyDragonfly3.MT_APP_KILL_COMPLETE
MT_ALL_MODULES_READY = _PyDragonfly3.MT_ALL_MODULES_READY
MT_CORE_MODULE_REINIT = _PyDragonfly3.MT_CORE_MODULE_REINIT
MT_AM_CONFIG_FILE_DATA = _PyDragonfly3.MT_AM_CONFIG_FILE_DATA
MT_AM_APP_NAME = _PyDragonfly3.MT_AM_APP_NAME
MT_SLAVE_ALL_MODULES_READY = _PyDragonfly3.MT_SLAVE_ALL_MODULES_READY
MT_SLAVE_FAIL_START_APP = _PyDragonfly3.MT_SLAVE_FAIL_START_APP
MT_SLAVE_FAIL_STOP_APP = _PyDragonfly3.MT_SLAVE_FAIL_STOP_APP
MT_SLAVE_FAIL_KILL_APP = _PyDragonfly3.MT_SLAVE_FAIL_KILL_APP
MT_SLAVE_APP_SHUTODWN_COMPLETE = _PyDragonfly3.MT_SLAVE_APP_SHUTODWN_COMPLETE
MT_SLAVE_APP_RESTART_COMPLETE = _PyDragonfly3.MT_SLAVE_APP_RESTART_COMPLETE
MT_SLAVE_APP_KILL_COMPLETE = _PyDragonfly3.MT_SLAVE_APP_KILL_COMPLETE
MT_SLAVE_AM_ERROR = _PyDragonfly3.MT_SLAVE_AM_ERROR
MT_APP_ERROR = _PyDragonfly3.MT_APP_ERROR
MT_SM_EXIT = _PyDragonfly3.MT_SM_EXIT
MT_CLOCK_SYNC = _PyDragonfly3.MT_CLOCK_SYNC
MT_TIMER_EXPIRED = _PyDragonfly3.MT_TIMER_EXPIRED
class MDF_TIMER_EXPIRED(_object):
    """Proxy of C++ MDF_TIMER_EXPIRED class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_TIMER_EXPIRED, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_TIMER_EXPIRED, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timer_id"] = _PyDragonfly3.MDF_TIMER_EXPIRED_timer_id_set
    __swig_getmethods__["timer_id"] = _PyDragonfly3.MDF_TIMER_EXPIRED_timer_id_get
    if _newclass:
        timer_id = _swig_property(_PyDragonfly3.MDF_TIMER_EXPIRED_timer_id_get, _PyDragonfly3.MDF_TIMER_EXPIRED_timer_id_set)

    def __init__(self):
        """__init__(MDF_TIMER_EXPIRED self) -> MDF_TIMER_EXPIRED"""
        this = _PyDragonfly3.new_MDF_TIMER_EXPIRED()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyDragonfly3.delete_MDF_TIMER_EXPIRED
    __del__ = lambda self: None
MDF_TIMER_EXPIRED_swigregister = _PyDragonfly3.MDF_TIMER_EXPIRED_swigregister
MDF_TIMER_EXPIRED_swigregister(MDF_TIMER_EXPIRED)

MT_TIMED_OUT = _PyDragonfly3.MT_TIMED_OUT
MT_SET_TIMER_FAILED = _PyDragonfly3.MT_SET_TIMER_FAILED
class MDF_SET_TIMER_FAILED(_object):
    """Proxy of C++ MDF_SET_TIMER_FAILED class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_SET_TIMER_FAILED, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_SET_TIMER_FAILED, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mod_id"] = _PyDragonfly3.MDF_SET_TIMER_FAILED_mod_id_set
    __swig_getmethods__["mod_id"] = _PyDragonfly3.MDF_SET_TIMER_FAILED_mod_id_get
    if _newclass:
        mod_id = _swig_property(_PyDragonfly3.MDF_SET_TIMER_FAILED_mod_id_get, _PyDragonfly3.MDF_SET_TIMER_FAILED_mod_id_set)
    __swig_setmethods__["timer_id"] = _PyDragonfly3.MDF_SET_TIMER_FAILED_timer_id_set
    __swig_getmethods__["timer_id"] = _PyDragonfly3.MDF_SET_TIMER_FAILED_timer_id_get
    if _newclass:
        timer_id = _swig_property(_PyDragonfly3.MDF_SET_TIMER_FAILED_timer_id_get, _PyDragonfly3.MDF_SET_TIMER_FAILED_timer_id_set)
    __swig_setmethods__["snooze_time"] = _PyDragonfly3.MDF_SET_TIMER_FAILED_snooze_time_set
    __swig_getmethods__["snooze_time"] = _PyDragonfly3.MDF_SET_TIMER_FAILED_snooze_time_get
    if _newclass:
        snooze_time = _swig_property(_PyDragonfly3.MDF_SET_TIMER_FAILED_snooze_time_get, _PyDragonfly3.MDF_SET_TIMER_FAILED_snooze_time_set)

    def __init__(self):
        """__init__(MDF_SET_TIMER_FAILED self) -> MDF_SET_TIMER_FAILED"""
        this = _PyDragonfly3.new_MDF_SET_TIMER_FAILED()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyDragonfly3.delete_MDF_SET_TIMER_FAILED
    __del__ = lambda self: None
MDF_SET_TIMER_FAILED_swigregister = _PyDragonfly3.MDF_SET_TIMER_FAILED_swigregister
MDF_SET_TIMER_FAILED_swigregister(MDF_SET_TIMER_FAILED)

MT_TM_EXIT = _PyDragonfly3.MT_TM_EXIT
MT_SET_TIMER = _PyDragonfly3.MT_SET_TIMER
class MDF_SET_TIMER(_object):
    """Proxy of C++ MDF_SET_TIMER class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_SET_TIMER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_SET_TIMER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timer_id"] = _PyDragonfly3.MDF_SET_TIMER_timer_id_set
    __swig_getmethods__["timer_id"] = _PyDragonfly3.MDF_SET_TIMER_timer_id_get
    if _newclass:
        timer_id = _swig_property(_PyDragonfly3.MDF_SET_TIMER_timer_id_get, _PyDragonfly3.MDF_SET_TIMER_timer_id_set)
    __swig_setmethods__["snooze_time"] = _PyDragonfly3.MDF_SET_TIMER_snooze_time_set
    __swig_getmethods__["snooze_time"] = _PyDragonfly3.MDF_SET_TIMER_snooze_time_get
    if _newclass:
        snooze_time = _swig_property(_PyDragonfly3.MDF_SET_TIMER_snooze_time_get, _PyDragonfly3.MDF_SET_TIMER_snooze_time_set)

    def __init__(self):
        """__init__(MDF_SET_TIMER self) -> MDF_SET_TIMER"""
        this = _PyDragonfly3.new_MDF_SET_TIMER()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyDragonfly3.delete_MDF_SET_TIMER
    __del__ = lambda self: None
MDF_SET_TIMER_swigregister = _PyDragonfly3.MDF_SET_TIMER_swigregister
MDF_SET_TIMER_swigregister(MDF_SET_TIMER)

MT_CANCEL_TIMER = _PyDragonfly3.MT_CANCEL_TIMER
class MDF_CANCEL_TIMER(_object):
    """Proxy of C++ MDF_CANCEL_TIMER class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_CANCEL_TIMER, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_CANCEL_TIMER, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timer_id"] = _PyDragonfly3.MDF_CANCEL_TIMER_timer_id_set
    __swig_getmethods__["timer_id"] = _PyDragonfly3.MDF_CANCEL_TIMER_timer_id_get
    if _newclass:
        timer_id = _swig_property(_PyDragonfly3.MDF_CANCEL_TIMER_timer_id_get, _PyDragonfly3.MDF_CANCEL_TIMER_timer_id_set)

    def __init__(self):
        """__init__(MDF_CANCEL_TIMER self) -> MDF_CANCEL_TIMER"""
        this = _PyDragonfly3.new_MDF_CANCEL_TIMER()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyDragonfly3.delete_MDF_CANCEL_TIMER
    __del__ = lambda self: None
MDF_CANCEL_TIMER_swigregister = _PyDragonfly3.MDF_CANCEL_TIMER_swigregister
MDF_CANCEL_TIMER_swigregister(MDF_CANCEL_TIMER)

MT_LM_EXIT = _PyDragonfly3.MT_LM_EXIT
MT_MM_READY = _PyDragonfly3.MT_MM_READY
MT_LM_READY = _PyDragonfly3.MT_LM_READY
MT_SAVE_MESSAGE_LOG = _PyDragonfly3.MT_SAVE_MESSAGE_LOG
MAX_LOGGER_FILENAME_LENGTH = _PyDragonfly3.MAX_LOGGER_FILENAME_LENGTH
class MDF_SAVE_MESSAGE_LOG(_object):
    """Proxy of C++ MDF_SAVE_MESSAGE_LOG class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_SAVE_MESSAGE_LOG, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_SAVE_MESSAGE_LOG, name)
    __repr__ = _swig_repr
    __swig_setmethods__["pathname"] = _PyDragonfly3.MDF_SAVE_MESSAGE_LOG_pathname_set
    __swig_getmethods__["pathname"] = _PyDragonfly3.MDF_SAVE_MESSAGE_LOG_pathname_get
    if _newclass:
        pathname = _swig_property(_PyDragonfly3.MDF_SAVE_MESSAGE_LOG_pathname_get, _PyDragonfly3.MDF_SAVE_MESSAGE_LOG_pathname_set)
    __swig_setmethods__["pathname_length"] = _PyDragonfly3.MDF_SAVE_MESSAGE_LOG_pathname_length_set
    __swig_getmethods__["pathname_length"] = _PyDragonfly3.MDF_SAVE_MESSAGE_LOG_pathname_length_get
    if _newclass:
        pathname_length = _swig_property(_PyDragonfly3.MDF_SAVE_MESSAGE_LOG_pathname_length_get, _PyDragonfly3.MDF_SAVE_MESSAGE_LOG_pathname_length_set)

    def __init__(self):
        """__init__(MDF_SAVE_MESSAGE_LOG self) -> MDF_SAVE_MESSAGE_LOG"""
        this = _PyDragonfly3.new_MDF_SAVE_MESSAGE_LOG()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyDragonfly3.delete_MDF_SAVE_MESSAGE_LOG
    __del__ = lambda self: None
MDF_SAVE_MESSAGE_LOG_swigregister = _PyDragonfly3.MDF_SAVE_MESSAGE_LOG_swigregister
MDF_SAVE_MESSAGE_LOG_swigregister(MDF_SAVE_MESSAGE_LOG)

MT_MESSAGE_LOG_SAVED = _PyDragonfly3.MT_MESSAGE_LOG_SAVED
MT_PAUSE_MESSAGE_LOGGING = _PyDragonfly3.MT_PAUSE_MESSAGE_LOGGING
MT_RESUME_MESSAGE_LOGGING = _PyDragonfly3.MT_RESUME_MESSAGE_LOGGING
MT_RESET_MESSAGE_LOG = _PyDragonfly3.MT_RESET_MESSAGE_LOG
MT_DUMP_MESSAGE_LOG = _PyDragonfly3.MT_DUMP_MESSAGE_LOG
MT_TIMING_TEST = _PyDragonfly3.MT_TIMING_TEST
MAX_TIMING_TEST_TIME_POINTS = _PyDragonfly3.MAX_TIMING_TEST_TIME_POINTS
class MDF_TIMING_TEST(_object):
    """Proxy of C++ MDF_TIMING_TEST class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_TIMING_TEST, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_TIMING_TEST, name)
    __repr__ = _swig_repr
    __swig_setmethods__["time"] = _PyDragonfly3.MDF_TIMING_TEST_time_set
    __swig_getmethods__["time"] = _PyDragonfly3.MDF_TIMING_TEST_time_get
    if _newclass:
        time = _swig_property(_PyDragonfly3.MDF_TIMING_TEST_time_get, _PyDragonfly3.MDF_TIMING_TEST_time_set)

    def __init__(self):
        """__init__(MDF_TIMING_TEST self) -> MDF_TIMING_TEST"""
        this = _PyDragonfly3.new_MDF_TIMING_TEST()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyDragonfly3.delete_MDF_TIMING_TEST
    __del__ = lambda self: None
MDF_TIMING_TEST_swigregister = _PyDragonfly3.MDF_TIMING_TEST_swigregister
MDF_TIMING_TEST_swigregister(MDF_TIMING_TEST)

MT_TIMING_MESSAGE = _PyDragonfly3.MT_TIMING_MESSAGE
class MDF_TIMING_MESSAGE(_object):
    """Proxy of C++ MDF_TIMING_MESSAGE class."""

    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MDF_TIMING_MESSAGE, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MDF_TIMING_MESSAGE, name)
    __repr__ = _swig_repr
    __swig_setmethods__["timing"] = _PyDragonfly3.MDF_TIMING_MESSAGE_timing_set
    __swig_getmethods__["timing"] = _PyDragonfly3.MDF_TIMING_MESSAGE_timing_get
    if _newclass:
        timing = _swig_property(_PyDragonfly3.MDF_TIMING_MESSAGE_timing_get, _PyDragonfly3.MDF_TIMING_MESSAGE_timing_set)
    __swig_setmethods__["ModulePID"] = _PyDragonfly3.MDF_TIMING_MESSAGE_ModulePID_set
    __swig_getmethods__["ModulePID"] = _PyDragonfly3.MDF_TIMING_MESSAGE_ModulePID_get
    if _newclass:
        ModulePID = _swig_property(_PyDragonfly3.MDF_TIMING_MESSAGE_ModulePID_get, _PyDragonfly3.MDF_TIMING_MESSAGE_ModulePID_set)
    __swig_setmethods__["send_time"] = _PyDragonfly3.MDF_TIMING_MESSAGE_send_time_set
    __swig_getmethods__["send_time"] = _PyDragonfly3.MDF_TIMING_MESSAGE_send_time_get
    if _newclass:
        send_time = _swig_property(_PyDragonfly3.MDF_TIMING_MESSAGE_send_time_get, _PyDragonfly3.MDF_TIMING_MESSAGE_send_time_set)

    def __init__(self):
        """__init__(MDF_TIMING_MESSAGE self) -> MDF_TIMING_MESSAGE"""
        this = _PyDragonfly3.new_MDF_TIMING_MESSAGE()
        try:
            self.this.append(this)
        except __builtin__.Exception:
            self.this = this
    __swig_destroy__ = _PyDragonfly3.delete_MDF_TIMING_MESSAGE
    __del__ = lambda self: None
MDF_TIMING_MESSAGE_swigregister = _PyDragonfly3.MDF_TIMING_MESSAGE_swigregister
MDF_TIMING_MESSAGE_swigregister(MDF_TIMING_MESSAGE)

# This file is compatible with both classic and new-style classes.


